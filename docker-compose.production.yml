# Production Docker Compose Configuration for PiWardrive
# This template supports blue-green deployment strategy

version: '3.8'

services:
  # Blue environment (active)
  piwardrive-blue:
    image: ${BLUE_IMAGE:-piwardrive:latest}
    container_name: piwardrive-blue
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SERVICE_NAME=piwardrive-blue
      - HEALTH_CHECK_PATH=/health
    volumes:
      - ./config/production.json:/app/config/production.json:ro
      - ./logs:/app/logs
      - piwardrive-data:/app/data
    networks:
      - piwardrive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.piwardrive-blue.rule=Host(`piwardrive.example.com`)"
      - "traefik.http.routers.piwardrive-blue.tls=true"
      - "traefik.http.routers.piwardrive-blue.priority=100"
      - "environment=blue"

  # Green environment (standby)
  piwardrive-green:
    image: ${GREEN_IMAGE:-piwardrive:latest}
    container_name: piwardrive-green
    ports:
      - "8081:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SERVICE_NAME=piwardrive-green
      - HEALTH_CHECK_PATH=/health
    volumes:
      - ./config/production.json:/app/config/production.json:ro
      - ./logs:/app/logs
      - piwardrive-data:/app/data
    networks:
      - piwardrive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=false"  # Initially disabled
      - "traefik.http.routers.piwardrive-green.rule=Host(`piwardrive.example.com`)"
      - "traefik.http.routers.piwardrive-green.tls=true"
      - "traefik.http.routers.piwardrive-green.priority=90"
      - "environment=green"

  # Load balancer / Reverse proxy
  traefik:
    image: traefik:v2.10
    container_name: piwardrive-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - piwardrive-network
    restart: unless-stopped
    depends_on:
      - piwardrive-blue
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.piwardrive.example.com`)"
      - "traefik.http.routers.dashboard.tls=true"

  # Database
  postgresql:
    image: postgres:15-alpine
    container_name: piwardrive-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-piwardrive}
      - POSTGRES_USER=${POSTGRES_USER:-piwardrive}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - piwardrive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-piwardrive}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: piwardrive-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - piwardrive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: piwardrive-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - piwardrive-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: piwardrive-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - piwardrive-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: piwardrive-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - piwardrive-network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: piwardrive-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/piwardrive:ro
      - /var/log:/var/log:ro
    networks:
      - piwardrive-network
    restart: unless-stopped
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml

networks:
  piwardrive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  piwardrive-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
