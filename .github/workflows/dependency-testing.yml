name: Dependency Testing

on:
  pull_request:
    paths:
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'package*.json'
  schedule:
    # Run dependency tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  test-dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        node-version: ['18', '20']
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: webui/package-lock.json
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
      
      - name: Install Node.js dependencies
        working-directory: webui
        run: npm ci
      
      - name: Run security audit (Python)
        run: |
          pip install safety bandit
          safety check --json --output safety-report.json || true
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Run security audit (Node.js)
        working-directory: webui
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
      
      - name: Run compatibility tests
        run: |
          # Run basic import tests
          python -c "
          import sys
          print(f'Python version: {sys.version}')
          
          # Test critical imports
          try:
              import piwardrive
              print('✓ PiWardrive import successful')
          except ImportError as e:
              print(f'❌ PiWardrive import failed: {e}')
              sys.exit(1)
          
          # Test performance modules
          try:
              from piwardrive.performance import DatabaseOptimizer, AsyncOptimizer, RealtimeOptimizer
              print('✓ Performance modules import successful')
          except ImportError as e:
              print(f'❌ Performance modules import failed: {e}')
              sys.exit(1)
          
          # Test web modules
          try:
              from piwardrive.service import app
              print('✓ FastAPI app import successful')
          except ImportError as e:
              print(f'❌ FastAPI app import failed: {e}')
              sys.exit(1)
          "
      
      - name: Check for breaking changes
        run: |
          python scripts/check_api_compatibility.py || true
      
      - name: Run dependency conflict detection
        run: |
          pip check
      
      - name: Run basic functionality tests
        run: |
          pytest tests/test_dependencies.py -v --tb=short
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-py${{ matrix.python-version }}-node${{ matrix.node-version }}
          path: |
            safety-report.json
            bandit-report.json
            npm-audit-report.json
          retention-days: 30
      
      - name: Comment on PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🔐 Security Audit Results\n\n';
            
            // Check Safety report
            try {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              if (safetyReport.length > 0) {
                comment += '### Python Security Issues:\n';
                safetyReport.forEach(issue => {
                  comment += `- **${issue.package}**: ${issue.advisory}\n`;
                });
              } else {
                comment += '✅ No Python security issues found\n';
              }
            } catch (e) {
              comment += '✅ No Python security issues found\n';
            }
            
            // Check npm audit report
            try {
              const npmReport = JSON.parse(fs.readFileSync('npm-audit-report.json', 'utf8'));
              if (npmReport.vulnerabilities && Object.keys(npmReport.vulnerabilities).length > 0) {
                comment += '\n### Node.js Security Issues:\n';
                Object.entries(npmReport.vulnerabilities).forEach(([pkg, vuln]) => {
                  comment += `- **${pkg}**: ${vuln.severity} - ${vuln.title}\n`;
                });
              } else {
                comment += '\n✅ No Node.js security issues found\n';
              }
            } catch (e) {
              comment += '\n✅ No Node.js security issues found\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
