name: Dependency Management

on:
  schedule:
    # Run dependency audit every Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of audit to run'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'security'
          - 'outdated'
          - 'licenses'

jobs:
  dependency-audit:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pip-audit safety pip-licenses pipdeptree
      
      - name: Run dependency audit
        run: |
          python scripts/dependency_audit.py --${{ github.event.inputs.audit_type || 'full' }} --output dependency_audit_report.json
        
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-report
          path: dependency_audit_report.json
          retention-days: 30
      
      - name: Run security scans
        run: |
          # Run pip-audit for CVE scanning
          pip-audit -r requirements.txt -f sarif -o pip-audit.sarif
          
          # Run safety check
          safety check -r requirements.txt --json > safety-report.json
          
          # Run bandit for code security
          bandit -r src --severity-level medium -f sarif -o bandit.sarif
        
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif
          category: pip-audit
        
      - name: Upload bandit results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
          category: bandit
      
      - name: Check for outdated packages
        run: |
          pip list --outdated --format=json > outdated-packages.json
          
          # Create summary for PR comment
          echo "## Dependency Audit Summary" > audit-summary.md
          echo "### Outdated Packages" >> audit-summary.md
          outdated_count=$(jq length outdated-packages.json)
          echo "Found $outdated_count outdated packages" >> audit-summary.md
          
          if [ $outdated_count -gt 0 ]; then
            echo "| Package | Current | Latest |" >> audit-summary.md
            echo "|---------|---------|--------|" >> audit-summary.md
            jq -r '.[] | "| \(.name) | \(.version) | \(.latest_version) |"' outdated-packages.json >> audit-summary.md
          fi
          
          echo "### Security Vulnerabilities" >> audit-summary.md
          if [ -f safety-report.json ]; then
            vuln_count=$(jq length safety-report.json)
            echo "Found $vuln_count security vulnerabilities" >> audit-summary.md
          fi
          
          echo "### Audit Report" >> audit-summary.md
          echo "Full audit report available in workflow artifacts" >> audit-summary.md
      
      - name: Create or update audit issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the audit summary
            const summaryPath = path.join(process.env.GITHUB_WORKSPACE, 'audit-summary.md');
            const summary = fs.readFileSync(summaryPath, 'utf8');
            
            // Check if there's an existing audit issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependency-audit', 'automated'],
              state: 'open'
            });
            
            const title = `Dependency Audit Report - ${new Date().toISOString().split('T')[0]}`;
            const body = `${summary}
            
            This is an automated dependency audit report. Please review the findings and take appropriate action.
            
            **Actions to take:**
            1. Review outdated packages and update if necessary
            2. Address any security vulnerabilities immediately
            3. Check the full audit report in the workflow artifacts
            
            **Generated by:** [Dependency Management Workflow](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: title,
                body: body
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependency-audit', 'automated', 'maintenance']
              });
            }
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            dependency_audit_report.json
            outdated-packages.json
            safety-report.json
            audit-summary.md
          retention-days: 30

  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses
      
      - name: Check licenses
        run: |
          pip-licenses --format=json > licenses.json
          pip-licenses --format=markdown > licenses.md
          
          # Check for problematic licenses
          problematic_licenses=$(jq -r '.[] | select(.License | test("GPL|AGPL|LGPL"; "i")) | .Name' licenses.json)
          if [ -n "$problematic_licenses" ]; then
            echo "::warning::Found packages with potentially problematic licenses:"
            echo "$problematic_licenses"
          fi
      
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            licenses.json
            licenses.md
          retention-days: 30
