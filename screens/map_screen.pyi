from __future__ import annotations

from typing import Any, Callable, Sequence

from kivy.uix.screenmanager import Screen


class MapScreen(Screen):
    gps_marker: Any
    ap_markers: list[Any]
    bt_markers: list[Any]
    track_points: list[tuple[float, float]]
    track_layer: Any
    ruler_points: list[tuple[float, float]]
    area_points: list[tuple[float, float]]
    breadcrumb: list[tuple[float, float]]
    kml_layers: list[Any]
    geofences: list[dict[str, Any]]
    context_menu: Any
    gpx_field: Any
    gpx_dialog: Any
    kml_field: Any
    kml_dialog: Any
    layer_menu: Any

    def __init__(self, **kwargs: Any) -> None: ...
    def on_enter(self) -> None: ...
    def on_leave(self) -> None: ...

    def save_waypoint(self, lat: float, lon: float) -> None: ...
    def load_gpx_prompt(self) -> None: ...
    def load_kml_prompt(self) -> None: ...
    def center_on_gps(self) -> None: ...
    def plot_aps(self) -> None: ...
    def plot_bt_devices(self) -> None: ...
    def show_layer_menu(self, widget: Any) -> None: ...
    def show_help_overlay(self) -> None: ...
    def start_ruler_mode(self) -> None: ...
    def add_ruler_point(self, lat: float, lon: float) -> None: ...
    def start_area_mode(self) -> None: ...
    def add_area_point(self, lat: float, lon: float) -> None: ...
    def finish_area_mode(self) -> None: ...
    def prefetch_tiles(self, bounds: Sequence[float], zoom: int = 16, folder: str = "/mnt/ssd/tiles", *, concurrency: int = 5, progress_cb: Callable[[int, int], None] | None = None) -> None: ...
    def prefetch_visible_region(self) -> None: ...
    def purge_old_tiles(self, max_age_days: int = 30, folder: str = "/mnt/ssd/tiles") -> None: ...
    def enforce_cache_limit(self, folder: str = "/mnt/ssd/tiles", limit_mb: int = 512) -> None: ...
    def filter_ap_markers(self, ssid: str | None = None, encryption: str | None = None, oui: str | None = None) -> None: ...
    def apply_icon_set(self, icon_map: dict[str, str]) -> None: ...
    def update_compass(self, heading: float) -> None: ...
    def register_sensor(self, name: str, handler: Callable[..., Any]) -> None: ...
    def add_geofence(self, name: str, polygon: Sequence[tuple[float, float]], on_enter: Callable[[str], None] | None = None, on_exit: Callable[[str], None] | None = None) -> None: ...
    def show_turn_prompt(self, message: str) -> None: ...
    def breadcrumb_path(self) -> list[tuple[float, float]]: ...
    def export_points_csv(self, path: str) -> None: ...
    def create_pdf_snapshot(self, path: str) -> None: ...
    def update_clusters_on_zoom(self, _mapview: Any, zoom: int) -> None: ...
    def spiderfy_markers(self) -> None: ...
    def adjust_quadtree(self, capacity: int) -> None: ...
    def update_marker_icons(self, icon_map: dict[str, str]) -> None: ...
    def set_directional_marker(self, marker: Any, bearing: float) -> None: ...
